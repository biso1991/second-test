# Generated by Django 4.0.1 on 2022-08-10 17:51

import api.qa.models
import api.qa.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Model",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "model_name",
                    models.CharField(max_length=255, verbose_name="model_name"),
                ),
                (
                    "model_ref_url",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=244,
                        verbose_name="model_ref_url",
                    ),
                ),
                (
                    "model_ref_path",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=244,
                        verbose_name="model_ref_path",
                    ),
                ),
                (
                    "scope",
                    models.IntegerField(
                        choices=[(0, "Private"), (1, "Public")],
                        default=0,
                        verbose_name="scope",
                    ),
                ),
                (
                    "source",
                    models.IntegerField(
                        choices=[(0, "MANUAL"), (1, "AUTOMATIC")],
                        default=1,
                        verbose_name="source",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, verbose_name="uuid")),
                (
                    "model_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=api.qa.models.upload_model_path_handler,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["rar", "zip"]
                            )
                        ],
                    ),
                ),
                ("create_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "model_db",
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "description",
                    models.TextField(max_length=300, verbose_name="description"),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, verbose_name="uuid"
                    ),
                ),
                ("create_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "store_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="store_name"
                    ),
                ),
                (
                    "elastic_index",
                    models.CharField(
                        blank=True,
                        max_length=244,
                        null=True,
                        verbose_name="elastic_index",
                    ),
                ),
                (
                    "elastic_index_answers",
                    models.CharField(
                        blank=True,
                        max_length=244,
                        null=True,
                        verbose_name="elastic_index_answers",
                    ),
                ),
                (
                    "elastic_index_eval_docs",
                    models.CharField(
                        blank=True,
                        max_length=244,
                        null=True,
                        verbose_name="elastic_index_eval_docs",
                    ),
                ),
                (
                    "elastic_index_labels",
                    models.CharField(
                        blank=True,
                        max_length=244,
                        null=True,
                        verbose_name="elastic_index_labels",
                    ),
                ),
                (
                    "trained_model_ref_url",
                    models.CharField(
                        blank=True,
                        max_length=244,
                        null=True,
                        verbose_name="trained_model_ref_url",
                    ),
                ),
                (
                    "trained_model_path",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=244,
                        verbose_name="trained_model_path",
                    ),
                ),
                (
                    "retreiver_count",
                    models.IntegerField(default=10, verbose_name="retreiver_count"),
                ),
                (
                    "reader_count",
                    models.IntegerField(default=5, verbose_name="reader_count"),
                ),
                (
                    "files_hash",
                    models.CharField(
                        blank=True, max_length=244, null=True, verbose_name="files_hash"
                    ),
                ),
                (
                    "files_ready",
                    models.BooleanField(default=True, verbose_name="files_ready"),
                ),
                ("vote", models.BooleanField(default=False, verbose_name="vote")),
                (
                    "preprocessing_options",
                    models.CharField(
                        choices=[("sliding-window", 0), ("simple-text-splitting", 1)],
                        default="simple-text-splitting",
                        max_length=255,
                        verbose_name="preprocessing_options",
                    ),
                ),
                (
                    "split_overlap",
                    models.IntegerField(default=5, verbose_name="split_overlap"),
                ),
                (
                    "split_length",
                    models.IntegerField(default=10, verbose_name="split_length"),
                ),
                (
                    "split_respect_sentence_boundary",
                    models.BooleanField(verbose_name="split_respect_sentence_boundary"),
                ),
                (
                    "split_by",
                    models.CharField(
                        choices=[("word", 0), ("sentence", 1), ("passage", 2)],
                        default="word",
                        max_length=244,
                        verbose_name="split_by",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="qa.model"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "qa_project_db",
            },
        ),
        migrations.CreateModel(
            name="Training_Job",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "status",
                    models.IntegerField(
                        choices=[
                            (0, "Idle"),
                            (1, "Running"),
                            (2, "Finished"),
                            (3, "Failed"),
                            (4, "Aborted"),
                        ],
                        default=0,
                        verbose_name="status",
                    ),
                ),
                (
                    "per_gpu_batch_size",
                    models.IntegerField(default=4, verbose_name="per_gpu_batch_size"),
                ),
                (
                    "learning_rate",
                    models.FloatField(default=0.1, verbose_name="learning_rate"),
                ),
                (
                    "warmup_steps",
                    models.IntegerField(default=1, verbose_name="warmup_steps"),
                ),
                (
                    "num_epochs",
                    models.IntegerField(default=5, verbose_name="num_epochs"),
                ),
                (
                    "celery_task_id",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=244,
                        verbose_name="celery_task_id",
                    ),
                ),
                ("create_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="qa.project"
                    ),
                ),
            ],
            options={
                "db_table": "training_job_db",
            },
        ),
        migrations.CreateModel(
            name="Training_Job_Monitoring",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cpu_utilization",
                    models.FloatField(default=0.0, verbose_name="cpu_utilization"),
                ),
                (
                    "memory_utilization",
                    models.FloatField(default=0.0, verbose_name="memory_utilization"),
                ),
                (
                    "memory_utilization_size",
                    models.FloatField(
                        default=0.0, verbose_name="memory_utilization_size"
                    ),
                ),
                (
                    "disk_utilization",
                    models.CharField(
                        default="", max_length=255, verbose_name="disk_utilization"
                    ),
                ),
                (
                    "loop_count",
                    models.IntegerField(default=0, verbose_name="loop_count"),
                ),
                (
                    "validation_accuracy",
                    models.FloatField(default=0.0, verbose_name="validation_accuracy"),
                ),
                (
                    "training_accuracy",
                    models.FloatField(default=0.0, verbose_name="training_accuracy"),
                ),
                ("precision", models.FloatField(default=0.0, verbose_name="precision")),
                ("f1_score", models.FloatField(default=0.0, verbose_name="f1_score")),
                ("recall", models.FloatField(default=0.0, verbose_name="recall")),
                (
                    "number_of_steps",
                    models.IntegerField(default=0, verbose_name="number_of_steps"),
                ),
                ("sas", models.FloatField(default=0.0, verbose_name="sas")),
                ("create_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "training_job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="qa.training_job",
                    ),
                ),
            ],
            options={
                "db_table": "training_job_monitoring_db",
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file_f",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=api.qa.models.upload_path_handler,
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["pdf", "txt", "docx"]
                            ),
                            api.qa.validators.file_size,
                        ],
                    ),
                ),
                (
                    "file_name",
                    models.CharField(
                        blank=True, default="", max_length=255, verbose_name="file_name"
                    ),
                ),
                (
                    "extension",
                    models.CharField(
                        blank=True, default="", max_length=255, verbose_name="extension"
                    ),
                ),
                ("file_size", models.FloatField(default=0, verbose_name="file_size")),
                ("create_date", models.DateTimeField(auto_now_add=True)),
                ("update_date", models.DateTimeField(auto_now=True)),
                (
                    "project_f",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="qa.project"
                    ),
                ),
            ],
            options={
                "db_table": "qa_file_db",
            },
        ),
    ]
